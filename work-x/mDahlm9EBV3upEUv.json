{
  "createdAt": "2024-12-09T19:07:56.410Z",
  "updatedAt": "2024-12-11T18:18:13.351Z",
  "id": "mDahlm9EBV3upEUv",
  "name": "Gera QR code aleatorio OBSOLETO",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Gerador de QR Code para WhatsApp</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js\"></script>\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      background: linear-gradient(135deg, #4CAF50 0%, #A5D6A7 100%);\n      height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      color: #333;\n    }\n\n    .container {\n      background: rgba(255, 255, 255, 0.95);\n      padding: 30px 40px;\n      border-radius: 15px;\n      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n      text-align: center;\n      max-width: 450px;\n      width: 90%;\n      transition: transform 0.3s ease;\n    }\n\n    .container:hover {\n      transform: translateY(-5px);\n    }\n\n    h1 {\n      font-size: 28px;\n      margin-bottom: 25px;\n      color: #2E7D32;\n    }\n\n    #loadingMessage {\n      margin-top: 15px;\n      font-size: 16px;\n      color: #FF5722;\n    }\n\n    #qrCodeContainer {\n      margin-top: 25px;\n      display: none;\n    }\n\n    canvas {\n      max-width: 100%;\n      height: auto;\n    }\n\n    .name-display {\n      margin-top: 15px;\n      font-size: 18px;\n      font-weight: bold;\n      color: #2E7D32;\n    }\n\n    .download-btn {\n      margin-top: 15px;\n      padding: 10px 16px;\n      background-color: #2196F3;\n      border: none;\n      border-radius: 8px;\n      color: white;\n      font-size: 16px;\n      cursor: pointer;\n      transition: background-color 0.3s ease;\n      text-decoration: none;\n      display: inline-block;\n    }\n\n    .download-btn:hover {\n      background-color: #1976D2;\n    }\n\n    @media (max-width: 500px) {\n      .container {\n        padding: 20px 25px;\n      }\n\n      h1 {\n        font-size: 24px;\n      }\n\n      .download-btn {\n        width: 100%;\n      }\n    }\n\n    /* Estilo para mensagem de sucesso/falha do webhook */\n    #webhookMessage {\n      margin-top: 15px;\n      font-size: 16px;\n      color: #4CAF50; /* Verde para sucesso */\n    }\n\n    #webhookMessage.error {\n      color: #FF0000; /* Vermelho para erros */\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Gerador de QR Code para WhatsApp</h1>\n    <div id=\"loadingMessage\">Gerando o QR Code, por favor aguarde...</div>\n    <div id=\"qrCodeContainer\">\n      <canvas id=\"qrcode\"></canvas>\n      <div id=\"nameDisplay\" class=\"name-display\"></div>\n      <a id=\"downloadBtn\" class=\"download-btn\" href=\"#\" download=\"qrcode.png\">Baixar QR Code</a>\n      <div id=\"webhookMessage\"></div>\n    </div>\n  </div>\n\n  <script>\n    /**\n     * Envia os dados para o webhook especificado.\n     * @param {string} name - Nome associado ao QR Code.\n     * @param {string} qrCodeBase64 - QR Code em formato Base64 puro.\n     */\n    async function sendToWebhook(name, qrCodeBase64) {\n      try {\n        const response = await fetch('https://n8n-n8n-webhook.tkbczu.easypanel.host/webhook/envialink', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: name,\n            qrCode: qrCodeBase64\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error(`Erro na requisição: ${response.statusText}`);\n        }\n\n        const result = await response.json();\n        return result;\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    /**\n     * Gera o QR Code e envia os dados para o webhook.\n     * @param {string} name - Nome associado ao QR Code.\n     */\n    async function generateQRCode(name) {\n      // Defina o número de telefone e a mensagem desejada\n      const numeroTelefone = \"5511999999999\"; // Substitua pelo número desejado no formato internacional\n      const mensagem = `Olá, meu nome é ${name}. Gostaria de saber mais sobre seus serviços.`;\n\n      // Codificar a mensagem para URL\n      const mensagemCodificada = encodeURIComponent(mensagem);\n\n      // Criar o link do WhatsApp\n      const data = `https://wa.me/${numeroTelefone}?text=${mensagemCodificada}`;\n      \n      const canvas = document.getElementById('qrcode');\n      const nameDisplay = document.getElementById('nameDisplay');\n      const qrCodeContainer = document.getElementById('qrCodeContainer');\n      const loadingMessage = document.getElementById('loadingMessage');\n      const downloadBtn = document.getElementById('downloadBtn');\n      const webhookMessage = document.getElementById('webhookMessage');\n\n      // Mostrar mensagem de carregamento\n      loadingMessage.style.display = 'block';\n      qrCodeContainer.style.display = 'none';\n      webhookMessage.textContent = '';\n      webhookMessage.classList.remove('error');\n\n      try {\n        // Gerar o QR Code no canvas\n        await QRCode.toCanvas(canvas, data, {\n          width: 300,\n          margin: 1,\n          color: {\n            dark: \"#2E7D32\",\n            light: \"#FFFFFF\"\n          }\n        });\n\n        console.log(\"QR Code gerado com sucesso.\");\n        nameDisplay.textContent = `Instância: ${name}`;\n        qrCodeContainer.style.display = 'block';\n\n        // Converter o canvas para Data URL\n        const dataURL = canvas.toDataURL(\"image/png\");\n        \n        // Extrair apenas a parte Base64 da Data URL\n        const base64Image = dataURL.split(',')[1];\n        \n        // Atualizar o link de download com a Data URL completa\n        downloadBtn.href = dataURL;\n\n        // Enviar dados para o webhook\n        const result = await sendToWebhook(name, base64Image);\n        console.log(\"Dados enviados para o webhook com sucesso:\", result);\n        webhookMessage.textContent = 'Dados enviados com sucesso para o webhook.';\n        webhookMessage.classList.remove('error');\n      } catch (error) {\n        console.error(\"Erro ao gerar ou enviar o QR Code:\", error);\n\n        // Determinar onde ocorreu o erro\n        if (error.message.includes('fetch')) {\n          webhookMessage.textContent = 'Ocorreu um erro ao enviar os dados para o webhook.';\n          webhookMessage.classList.add('error');\n        } else {\n          loadingMessage.textContent = 'Ocorreu um erro ao gerar o QR Code. Por favor, tente novamente.';\n          loadingMessage.style.color = '#FF0000';\n        }\n      } finally {\n        // Esconder mensagem de carregamento se ainda estiver visível\n        loadingMessage.style.display = 'none';\n      }\n    }\n\n    // Gera o QR Code automaticamente ao carregar a página\n    window.onload = function() {\n      const name = \"{{ $json.name }}\"; // Nome dinâmico do QR Code\n\n      if (name) {\n        generateQRCode(name);\n      } else {\n        const loadingMessage = document.getElementById('loadingMessage');\n        loadingMessage.textContent = 'Nenhum nome fornecido para gerar o QR Code.';\n        loadingMessage.style.color = '#FF0000';\n      }\n    };\n  </script>\n</body>\n</html>\n"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -280,
        -120
      ],
      "id": "b3d5a0eb-e5b5-4826-9af9-e5c3e45caf8a",
      "name": "HTML"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -60,
        -120
      ],
      "id": "d0572aa5-c5da-45d2-a17b-e4945e0b87fb",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "925cdfa8-94e4-44ed-8fc3-50d9f08c1ab3",
              "name": "base64",
              "value": "={{ $json.body.qrCode.split(',').last() }}",
              "type": "string"
            },
            {
              "id": "087d3c68-4bd0-44bc-82ed-dccc7ea2dc72",
              "name": "",
              "value": "={{ $json.name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        -340
      ],
      "id": "6d5876ba-8d67-40f8-8d1d-2212244c65f0",
      "name": "Edit Fields",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -700,
        -340
      ],
      "id": "919c0029-8b7a-44c0-b822-4eeb46b548e1",
      "name": "Convert to File1",
      "disabled": true
    },
    {
      "parameters": {
        "path": "QRcode",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -640,
        -120
      ],
      "id": "90014762-1dbb-411c-a9c0-b59491430902",
      "name": "Pagina do QR code",
      "webhookId": "cce5e6b5-f99a-48a3-8b18-cf524f03c4ce"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "Instance",
          "mode": "list",
          "cachedResultName": "Instance"
        },
        "where": {
          "values": [
            {
              "column": "connectionStatus",
              "value": "close"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -460,
        -120
      ],
      "id": "e98bfaf9-076e-4c6c-9437-0e66d55b04d8",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "VHCkkfcYq2gachxp",
          "name": "PostgresEVO"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "envialink",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -620,
        60
      ],
      "id": "46d530bc-6845-4fec-b655-0016580f9d8b",
      "name": "Webhook",
      "webhookId": "764edf66-0aed-4760-b5b3-8110f4b367bf"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "name"
        },
        "table": {
          "__rl": true,
          "value": "Instance",
          "mode": "list",
          "cachedResultName": "Instance"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "connectionStatus",
              "value": "close"
            }
          ]
        },
        "options": {}
      },
      "id": "c5443179-40fd-47f4-820d-8f886272823d",
      "name": "Conexões Evolution",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1480,
        40
      ],
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "94591044-ee22-4577-b06d-bf3392184638",
              "leftValue": "={{ !!Object.keys($node[\"Conexões Evolution\"].data).length }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "73fe9f15-0355-4f8a-a7de-93a07618c8f2",
      "name": "Encontrou Desconectado?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1340,
        540
      ],
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://wapi.evo.smileia.com.br/message/sendText/SmileIA_Teste",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "=7274790CAFC3-42D6-A24E-27D9EB9CCEF6"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "=5511994989615"
            },
            {
              "name": "text",
              "value": "=🚨*Instância Desconectada*🚨\n_Instancia:_ {{ $json.name }}\n_Numero:_ {{ $json.number }}\n_Desconectada:_ {{ $json.disconnectionAt }}"
            },
            {
              "name": "delay",
              "value": 2000
            }
          ]
        },
        "options": {}
      },
      "id": "49bdcc72-0a5f-457c-bce8-f7ec2734d677",
      "name": "Envia MSG",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -600,
        440
      ],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "c578eae8-9755-45d0-8ebf-deed88239f78",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1120,
        660
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Função para formatar o campo disconnectionAt para o formato DD/MM/AAAA - HH:MM:SS no horário de São Paulo\nfunction formatarData(timestamp) {\n  // Ajusta para o fuso horário de São Paulo\n  const data = new Date(new Date(timestamp).toLocaleString(\"en-US\", { timeZone: \"America/Sao_Paulo\" }));\n\n  // Extraindo os componentes da data no fuso horário ajustado\n  const dia = String(data.getDate()).padStart(2, '0');\n  const mes = String(data.getMonth() + 1).padStart(2, '0'); // Mês começa em 0\n  const ano = data.getFullYear();\n  const horas = String(data.getHours()).padStart(2, '0');\n  const minutos = String(data.getMinutes()).padStart(2, '0');\n  const segundos = String(data.getSeconds()).padStart(2, '0');\n  \n  return `${dia}/${mes}/${ano} - ${horas}:${minutos}:${segundos}`;\n}\n\n// Mapeia os itens de entrada para extrair apenas os campos desejados\nreturn $input.all().map(item => ({\n  name: item.json.name,\n  number: item.json.number,\n  profileName: item.json.profileName,\n  disconnectionAt: formatarData(item.json.disconnectionAt) // Chama a função corrigida\n}));"
      },
      "id": "bf4da68c-a26b-48dd-807d-5b09c5cd76ed",
      "name": "Code Analise",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        420
      ],
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f97ac048-7c20-47b4-9f0d-0dc1f31cab10",
      "name": "Loop",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -900,
        420
      ],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "9c2e8452-79f1-4efa-b81f-caf9086b666c",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -340,
        520
      ],
      "webhookId": "73ab59c1-9368-4051-a80f-b21ed2e16e4e",
      "disabled": true
    },
    {
      "parameters": {},
      "id": "80c30224-ea6d-4c5c-871f-2fbde6238000",
      "name": "Fim",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -580,
        280
      ],
      "disabled": true
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 10
            }
          ]
        }
      },
      "id": "b702f866-cfe3-4c86-bfa5-cb262e530d49",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1700,
        40
      ],
      "disabled": true
    },
    {
      "parameters": {
        "url": "=https://evo-evo.tkbczu.easypanel.host/instance/connect/{{ $json.body.name }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "PJMX6JKOxNit5icPyHv4IsSk2qLEq4NGb"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        120
      ],
      "id": "e0b01fc1-116c-45ac-b779-d1d4c8a24af4",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Gerador de QR Code</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js\"></script>\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      background: linear-gradient(180deg, #4CAF50 0%, #A5D6A7 100%);\n      height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n\n    .container {\n      background: rgba(255, 255, 255, 0.9);\n      padding: 20px 30px;\n      border-radius: 10px;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n      text-align: center;\n      max-width: 400px;\n      width: 100%;\n    }\n\n    h1 {\n      font-size: 24px;\n      margin-bottom: 20px;\n      color: #333;\n    }\n\n    canvas {\n      display: block;\n      margin: 0 auto;\n      margin-top: 20px;\n    }\n\n    .name-display {\n      margin-top: 10px;\n      font-size: 18px;\n      font-weight: bold;\n      color: #333;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Gerador de QR Code</h1>\n    <div id=\"loadingMessage\" style=\"display: none;\">Gerando o QR Code, por favor aguarde...</div>\n    <div id=\"qrCodeContainer\">\n      <canvas id=\"qrcode\"></canvas>\n      <div id=\"name-display\" class=\"name-display\"></div>\n    </div>\n  </div>\n\n  <script>\n    function generateQRCode() {\n      const name = \"{{ $json.name }}\"; // Nome dinâmico do QR Code\n      const data = `https://example.com?name=${encodeURIComponent(name)}`; // Link com o nome dinâmico\n      const canvas = document.getElementById('qrcode');\n      const nameDisplay = document.getElementById('name-display');\n      const qrCodeContainer = document.getElementById('qrCodeContainer');\n\n      // Atualiza o texto do nome na interface\n      nameDisplay.textContent = `Instância: ${name}`;\n\n      QRCode.toCanvas(canvas, data, {\n        width: 300, // Tamanho do QR Code\n        margin: 0,  // Remover bordas\n        color: {\n          dark: \"#000000\", // Preto para o QR Code\n          light: \"#FFFFFF\" // Branco para o fundo\n        }\n      }, function (error) {\n        if (error) {\n          console.error(\"Erro ao gerar QR Code:\", error);\n        } else {\n          console.log(\"QR Code gerado com sucesso.\");\n        }\n      });\n    }\n\n    // Gera o QR Code automaticamente ao carregar a página\n    window.onload = generateQRCode;\n  </script>\n</body>\n</html>\n"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        140,
        420
      ],
      "id": "c0938225-78d5-48ec-b2a7-946d11460d79",
      "name": "HTML1",
      "disabled": true
    },
    {
      "parameters": {
        "respondWith": "binary",
        "responseDataSource": "set",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        200,
        60
      ],
      "id": "f975c344-fd7c-4319-9991-a7455f06989c",
      "name": "Respond to Webhook4",
      "disabled": true
    },
    {
      "parameters": {
        "url": "=https://evo-evo.tkbczu.easypanel.host/instance/connect/{{ $json.body.name }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "PJMX6JKOxNit5icPyHv4IsSk2qLEq4NGb"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -460,
        60
      ],
      "id": "7a5678a2-1e60-4dd9-ac0b-954be0827d3b",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "baf05207-7b62-41a6-8c11-d4fff7f70843",
              "name": "base64",
              "value": "={{ $json.base64.split(',').last() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -300,
        60
      ],
      "id": "9cb6b4b0-7de6-40f9-8256-cc2b64a3a14f",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -120,
        60
      ],
      "id": "84d777f7-723a-4b7e-91cd-679823f652fe",
      "name": "Convert to File"
    }
  ],
  "connections": {
    "HTML": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagina do QR code": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conexões Evolution": {
      "main": [
        []
      ]
    },
    "Encontrou Desconectado?": {
      "main": [
        [
          {
            "node": "Code Analise",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Analise": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop": {
      "main": [
        [
          {
            "node": "Fim",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Envia MSG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envia MSG": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Conexões Evolution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": null,
  "pinData": {},
  "versionId": "4537bbef-a4ee-4da5-932a-f7f57bc971bb",
  "triggerCount": 2,
  "tags": [
    {
      "createdAt": "2024-10-30T13:05:50.798Z",
      "updatedAt": "2024-10-30T13:05:50.798Z",
      "id": "YEMOCqgKzuvlDA5d",
      "name": "system"
    }
  ]
}