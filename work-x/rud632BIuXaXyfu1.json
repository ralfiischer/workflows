{
  "createdAt": "2024-11-14T16:47:37.243Z",
  "updatedAt": "2025-01-31T16:48:46.956Z",
  "id": "rud632BIuXaXyfu1",
  "name": "Reconhecimento setor Chatwoot",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "retornochat",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -840,
        0
      ],
      "id": "19b2971b-a648-4ed8-bb82-184139688649",
      "name": "Webhook",
      "webhookId": "c3d2979e-d8c2-411b-803d-dea6ee55a6db"
    },
    {
      "parameters": {
        "inputText": "={{ $json['contato-menssagem'] }}",
        "categories": {
          "categories": [
            {
              "category": "Suporte",
              "description": "=/**\n * Script para identificar a intenção de contato com o suporte.\n */\n\n/**\n * Lista de palavras-chave e frases que indicam intenção de contato com o suporte.\n * Utiliza expressões regulares para correspondências mais precisas.\n */\nconst SUPPORT_KEYWORDS = [\n    /\\bpreciso de ajuda\\b/i,\n    /\\bsuporte\\b/i,\n    /\\bproblema\\b/i,\n    /\\bnão consigo\\b/i,\n    /\\berro\\b/i,\n    /\\bajuda com\\b/i,\n    /\\bcontato com suporte\\b/i,\n    /\\batendimento\\b/i,\n    /\\bnão está funcionando\\b/i,\n    /\\bfalar com suporte\\b/i,\n    /\\bsuporte técnico\\b/i,\n    /\\bfalha\\b/i,\n    /\\bbug\\b/i,\n    /\\bcomo resolver\\b/i,\n    /\\bajuda urgente\\b/i\n];\n\n/**\n * Identifica a intenção de suporte em uma mensagem do cliente.\n *\n * @param {string} mensagem - A mensagem enviada pelo cliente.\n * @returns {boolean} - Retorna true se a intenção de suporte for identificada, caso contrário, false.\n */\nfunction identificarIntencaoSuporte(mensagem) {\n    if (typeof mensagem !== 'string') {\n        console.warn('Entrada inválida: a mensagem deve ser uma string.');\n        return false;\n    }\n\n    // Remove espaços extras e normaliza a mensagem\n    const mensagemNormalizada = mensagem.trim().toLowerCase();\n\n    // Verifica se alguma das palavras-chave corresponde à mensagem\n    return SUPPORT_KEYWORDS.some(regex => regex.test(mensagemNormalizada));\n}\n\n// Exemplo de uso\nconst mensagemDoCliente = \"Olá, estou com um problema e preciso falar com o suporte!\";\n\nif (identificarIntencaoSuporte(mensagemDoCliente)) {\n    console.log(\"A intenção é: Suporte\"); // Ação quando há intenção de suporte\n    // Aqui você pode adicionar a lógica para redirecionar para o time de suporte, enviar uma resposta automática, etc.\n} else {\n    console.log(\"Nenhuma intenção de suporte identificada\"); // Ação alternativa\n    // Aqui você pode tratar outras intenções ou seguir com o fluxo padrão\n}\n"
            },
            {
              "category": "Financeiro",
              "description": "=/**\n * Script para identificar a intenção de contato com o setor financeiro.\n */\n\n/**\n * Lista de palavras-chave e frases que indicam intenção de contato com o setor financeiro.\n * Utiliza expressões regulares para correspondências mais precisas.\n */\nconst FINANCEIRO_KEYWORDS = [\n    /\\bpagamento\\b/i,\n    /\\bfatura\\b/i,\n    /\\bcobrança\\b/i,\n    /\\bboleto\\b/i,\n    /\\bnota fiscal\\b/i,\n    /\\bfinanceiro\\b/i,\n    /\\bcontas a pagar\\b/i,\n    /\\bcontas a receber\\b/i,\n    /\\bquero pagar\\b/i,\n    /\\bproblema com pagamento\\b/i,\n    /\\berro na cobrança\\b/i,\n    /\\bemitir nota\\b/i,\n    /\\brefaturamento\\b/i,\n    /\\bajuda com minha fatura\\b/i,\n    /\\balterar forma de pagamento\\b/i,\n    /\\bcomprovante de pagamento\\b/i,\n    /\\bparcelamento\\b/i\n];\n\n/**\n * Identifica a intenção de contato com o setor financeiro em uma mensagem do cliente.\n *\n * @param {string} mensagem - A mensagem enviada pelo cliente.\n * @returns {boolean} - Retorna true se a intenção financeira for identificada, caso contrário, false.\n */\nfunction identificarIntencaoFinanceiro(mensagem) {\n    if (typeof mensagem !== 'string') {\n        console.warn('Entrada inválida: a mensagem deve ser uma string.');\n        return false;\n    }\n\n    // Remove espaços extras e normaliza a mensagem\n    const mensagemNormalizada = mensagem.trim().toLowerCase();\n\n    // Verifica se alguma das palavras-chave corresponde à mensagem\n    return FINANCEIRO_KEYWORDS.some(regex => regex.test(mensagemNormalizada));\n}\n\n// Exemplo de uso\nconst mensagemDoCliente = \"Olá, preciso de ajuda com o pagamento da minha fatura!\";\n\nif (identificarIntencaoFinanceiro(mensagemDoCliente)) {\n    console.log(\"A intenção é: Financeiro\"); // Ação quando há intenção financeira\n    // Aqui você pode adicionar a lógica para redirecionar para o setor financeiro, enviar uma resposta automática, etc.\n} else {\n    console.log(\"Nenhuma intenção financeira identificada\"); // Ação alternativa\n    // Aqui você pode tratar outras intenções ou seguir com o fluxo padrão\n}\n    ];\n\n    // Normaliza a mensagem para minúsculas para garantir a correspondência com palavras-chave\n    const mensagemNormalizada = mensagem.toLowerCase();\n\n    // Verifica se alguma das palavras-chave está presente na mensagem\n    const intencaoFinanceira = palavrasChaveFinanceiro.some(palavraChave => \n        mensagemNormalizada.includes(palavraChave)\n    );\n\n    // Retorna true se identificou a intenção financeira; caso contrário, false\n    return intencaoFinanceira;\n}\n\n// Exemplo de uso\nconst mensagemDoCliente = \"Olá, preciso de ajuda com o pagamento da minha fatura!\";\nif (identificarIntencaoFinanceiro(mensagemDoCliente)) {\n    console.log(\"A intenção é: Financeiro\"); // Ação quando há intenção de financeiro\n} else {\n    console.log(\"Nenhuma intenção financeira identificada\"); // Ação alternativa\n}\n"
            },
            {
              "category": "Aleatorio",
              "description": "=/**\n * Script para identificar intenções que não pertencem ao setor financeiro ou de suporte.\n */\n\n/**\n * Lista de palavras-chave e frases que indicam intenção de contato com o setor financeiro.\n * Utiliza expressões regulares para correspondências mais precisas.\n */\nconst FINANCEIRO_KEYWORDS = [\n    /\\bpagamento\\b/i,\n    /\\bfatura\\b/i,\n    /\\bcobrança\\b/i,\n    /\\bboleto\\b/i,\n    /\\bnota fiscal\\b/i,\n    /\\bfinanceiro\\b/i,\n    /\\bcontas a pagar\\b/i,\n    /\\bcontas a receber\\b/i,\n    /\\bquero pagar\\b/i,\n    /\\bproblema com pagamento\\b/i,\n    /\\berro na cobrança\\b/i,\n    /\\bemitir nota\\b/i,\n    /\\brefaturamento\\b/i,\n    /\\bajuda com minha fatura\\b/i,\n    /\\balterar forma de pagamento\\b/i,\n    /\\bcomprovante de pagamento\\b/i,\n    /\\bparcelamento\\b/i\n];\n\n/**\n * Lista de palavras-chave e frases que indicam intenção de contato com o suporte.\n * Utiliza expressões regulares para correspondências mais precisas.\n */\nconst SUPORTE_KEYWORDS = [\n    /\\berro\\b/i,\n    /\\bproblema\\b/i,\n    /\\bajuda\\b/i,\n    /\\bsuporte\\b/i,\n    /\\bnão funciona\\b/i,\n    /\\bnão consigo\\b/i,\n    /\\bcomo faço\\b/i,\n    /\\bsuporte técnico\\b/i,\n    /\\batendimento\\b/i,\n    /\\bresolver\\b/i,\n    /\\bconserto\\b/i,\n    /\\bassistência\\b/i,\n    /\\btroubleshooting\\b/i\n];\n\n/**\n * Identifica se a intenção da mensagem não pertence ao setor financeiro nem ao de suporte.\n *\n * @param {string} mensagem - A mensagem enviada pelo cliente.\n * @returns {boolean} - Retorna true se a intenção for de outro assunto, caso contrário, false.\n */\nfunction identificarIntencaoOutroAssunto(mensagem) {\n    if (typeof mensagem !== 'string') {\n        console.warn('Entrada inválida: a mensagem deve ser uma string.');\n        return false;\n    }\n\n    // Remove espaços extras e normaliza a mensagem\n    const mensagemNormalizada = mensagem.trim().toLowerCase();\n\n    // Verifica se alguma das palavras-chave de financeiro está presente\n    const intencaoFinanceira = FINANCEIRO_KEYWORDS.some(regex => regex.test(mensagemNormalizada));\n\n    // Verifica se alguma das palavras-chave de suporte está presente\n    const intencaoSuporte = SUPORTE_KEYWORDS.some(regex => regex.test(mensagemNormalizada));\n\n    // Retorna true se a intenção não for financeira nem de suporte; caso contrário, false\n    return !intencaoFinanceira && !intencaoSuporte;\n}\n\n// Exemplo de uso\nconst mensagemDoCliente = \"Gostaria de saber sobre os produtos disponíveis.\";\n\nif (identificarIntencaoOutroAssunto(mensagemDoCliente)) {\n    console.log(\"A intenção é: Outro Assunto\"); // Ação para assuntos diferentes de financeiro e suporte\n    // Aqui você pode adicionar a lógica para redirecionar para o setor apropriado, enviar uma resposta automática, etc.\n} else {\n    console.log(\"A intenção está relacionada ao setor financeiro ou suporte\"); // Ação alternativa\n    // Aqui você pode tratar intenções financeiras ou de suporte conforme necessário\n}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        -260,
        -20
      ],
      "id": "ab032bba-3263-43b6-9d4f-0b3e8b8644bb",
      "name": "Text Classifier"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -260,
        140
      ],
      "id": "9df57900-a90a-47cc-b218-1e7e0c5dd8f5",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "RhJGnAesg7rbO4uq",
          "name": "primeiro assistent"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b8b52f0b-bba8-43e6-ae00-0440b61e19ed",
              "name": "contato-nome",
              "value": "={{ $json.body.conversation.meta.sender.name }}",
              "type": "string"
            },
            {
              "id": "81f8e0a3-9d58-4eae-af56-be7f4f1ec74f",
              "name": "contato-wpp",
              "value": "={{ $json.body.conversation.messages[0].sender.identifier }}",
              "type": "string"
            },
            {
              "id": "ff0c9022-6895-46c9-8295-16db1e00c5ca",
              "name": "contato-menssagem",
              "value": "={{ $json.body.conversation.messages[0].content }}",
              "type": "string"
            },
            {
              "id": "9f4f8787-d143-48ca-9c75-764afbbebb12",
              "name": "conta-id",
              "value": "={{ $json.body.conversation.messages[0].account_id }}",
              "type": "string"
            },
            {
              "id": "a7aabad5-4776-43c6-9b62-d521ba0ddd14",
              "name": "conversa-id",
              "value": "={{ $json.body.conversation.messages[0].conversation_id }}",
              "type": "string"
            },
            {
              "id": "de33af0e-9161-4e75-bf70-7a2e61f6a007",
              "name": "evento-tipo",
              "value": "={{ $json.body.event }}",
              "type": "string"
            },
            {
              "id": "88680e1a-660e-4dae-a10d-a45b3878c579",
              "name": "chatwoot-token",
              "value": "zyDXZitMJccAXaTZF9arUxMh",
              "type": "string"
            },
            {
              "id": "ef96b461-14cc-450b-be92-b9556cfd15b0",
              "name": "event",
              "value": "={{ $json.body.message_type }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -660,
        0
      ],
      "id": "d08b9444-f8bf-48bb-8648-dc5e7a897cc7",
      "name": "normalização"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5e6b4f-f8ce-458b-ba7b-0e3f51615fed",
              "leftValue": "={{ $json['evento-tipo'] }}",
              "rightValue": "message_created",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -480,
        0
      ],
      "id": "0e4db6c8-0f3c-40dd-90b9-e02e522c3908",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo-chatwoot.tkbczu.easypanel.host/api/v1/accounts/{{ $json['conta-id'] }}/conversations/{{ $json['conversa-id'] }}/assignments",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "=zyDXZitMJccAXaTZF9arUxMh"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "team_id",
              "value": "3"
            }
          ]
        },
        "options": {}
      },
      "id": "775fe5a3-ca72-4527-8477-8533ab37c0e8",
      "name": "Chatwoot sup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        100,
        -100
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo-chatwoot.tkbczu.easypanel.host/api/v1/accounts/{{ $json['conta-id'] }}/conversations/{{ $json['conversa-id'] }}/assignments",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "=zyDXZitMJccAXaTZF9arUxMh"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "team_id",
              "value": "4"
            }
          ]
        },
        "options": {}
      },
      "id": "d472f42d-c63b-4567-a4e4-62db3e6c13ca",
      "name": "Chatwoot financeiro",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        100,
        40
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evo-evolution-app.tkbczu.easypanel.host/message/sendText/teste",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "BE8510C8CFE4-4CED-958D-5394E78C88C2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('normalização').item.json['contato-wpp'] }}"
            },
            {
              "name": "text",
              "value": "Por favor, aguarde enquanto encaminhamos sua solicitação para o setor de suporte responsável."
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "0b35cc4f-8855-42eb-a14a-588034f22c4b",
      "name": "Retorno EVO",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        -100
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evo-evolution-app.tkbczu.easypanel.host/message/sendText/teste",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "BE8510C8CFE4-4CED-958D-5394E78C88C2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('normalização').item.json['contato-wpp'] }}"
            },
            {
              "name": "text",
              "value": "=Por favor, aguarde enquanto encaminhamos sua solicitação para o setor financeiro responsável."
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "0b619ede-6993-4f3b-bcfb-5ca3e39972fe",
      "name": "Retorno EVO1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        40
      ]
    },
    {
      "parameters": {
        "toolDescription": "obtem informações do site da afill",
        "url": "https://afill.com.br",
        "optimizeResponse": true,
        "responseType": "text"
      },
      "id": "81332792-2cf3-43c1-9666-bc75811c1e0e",
      "name": "base de conhecimento",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        60,
        500
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.content }}",
        "options": {
          "systemMessage": "={\n  \"assistant_behavior\": {\n    \"response_general_questions\": {\n      \"enabled\": true,\n      \"response_style\": {\n        \"summary\": true,\n        \"informative\": true\n      },\n      \"tool_usage\": {\n        \"use_tools\": false,\n        \"details_hidden\": true\n      }\n    },\n    \"response_afill_queries\": {\n      \"enabled\": true,\n      \"tool_usage\": {\n        \"use_tools\": true,\n        \"information_source\": \"tools\"\n      },\n      \"response_strategy\": {\n        \"summary\": true,\n        \"informative\": true\n      },\n      \"disclosure\": {\n        \"tool_usage_hidden\": true\n      }\n    },\n    \"recommend_import_systems\": {\n      \"enabled\": true,\n      \"recommendation\": {\n        \"system\": \"Afill\",\n        \"website\": \"https://www.afill.com.br\"\n      }\n    },\n    \"disallowed_information\": {\n      \"tool_usage_details\": false,\n      \"internal_policies\": true\n    }\n  }\n}\n"
        }
      },
      "id": "8625f431-9ca2-4f13-8bfa-61ff1ec8f685",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -140,
        360
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "59537747-53d9-4507-a745-9ace9c60ae68",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -140,
        500
      ],
      "credentials": {
        "openAiApi": {
          "id": "RhJGnAesg7rbO4uq",
          "name": "primeiro assistent"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evo-evolution-app.tkbczu.easypanel.host/message/sendText/teste",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "BE8510C8CFE4-4CED-958D-5394E78C88C2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('normalização').item.json['contato-wpp'] }}"
            },
            {
              "name": "text",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "a78dee37-65f7-46f4-942d-033eed5b55fe",
      "name": "Retorno EVO2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        200,
        360
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $json['contato-wpp'] }}_block",
        "value": "true",
        "keyType": "string",
        "expire": true,
        "ttl": 10
      },
      "id": "b3fc3b99-d165-4bee-8a3f-8f9223f49d02",
      "name": "Block AI",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -560,
        220
      ],
      "credentials": {
        "redis": {
          "id": "L0Js4WEW1heNgnPs",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "block",
        "key": "={{ $json['contato-wpp'] }}_block",
        "options": {}
      },
      "id": "b55b137c-6eb0-40f1-9548-2b7334006da8",
      "name": "Get Block Chat Id",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -560,
        380
      ],
      "credentials": {
        "redis": {
          "id": "L0Js4WEW1heNgnPs",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.block }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IA PODE RESPONDER"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "3ef0e01c-cc14-4663-bb4d-2905b350c3ab",
                    "leftValue": "={{ $json.block }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IA NAO PODE RESPONDER"
            }
          ]
        },
        "options": {}
      },
      "id": "76a54c9f-fd01-47d4-85e4-b8fbab6a6302",
      "name": "Switch Block",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -380,
        380
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('normalização').item.json.event }}",
                    "rightValue": "outcoming",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "outcoming"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e37f4fc7-b949-4700-bfc6-526883d008aa",
                    "leftValue": "={{ $('normalização').item.json.event }}",
                    "rightValue": "incoming",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "incoming"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -780,
        300
      ],
      "id": "c43c78ea-ebea-48ea-8a06-fde67c58f752",
      "name": "Switch1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Switch1').item.json['contato-wpp'] }}",
        "tableName": "chatwoot"
      },
      "id": "ee669311-ab64-481e-848a-1cc175ca1b7d",
      "name": "Postgres Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.1,
      "position": [
        -40,
        520
      ],
      "credentials": {
        "postgres": {
          "id": "bX6ggeCJ75wvYGES",
          "name": "Postgres supabase"
        }
      }
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "normalização",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier": {
      "main": [
        [
          {
            "node": "Chatwoot sup",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Chatwoot financeiro",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalização": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Text Classifier",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Chatwoot financeiro": {
      "main": [
        [
          {
            "node": "Retorno EVO1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chatwoot sup": {
      "main": [
        [
          {
            "node": "Retorno EVO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "base de conhecimento": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Retorno EVO2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Block Chat Id": {
      "main": [
        [
          {
            "node": "Switch Block",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Block": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Block AI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Block Chat Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "c0682922-7415-4361-9a65-b7bd643a0ae8",
  "triggerCount": 1,
  "tags": []
}