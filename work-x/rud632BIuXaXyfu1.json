{
  "createdAt": "2024-11-14T16:47:37.243Z",
  "updatedAt": "2024-11-19T14:09:23.533Z",
  "id": "rud632BIuXaXyfu1",
  "name": "Reconhecimento setor Chatwoot",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d193c82f-0ea4-474c-8222-dc2850a21d43",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -840,
        0
      ],
      "id": "19b2971b-a648-4ed8-bb82-184139688649",
      "name": "Webhook",
      "webhookId": "2095b5c3-cfdc-49e2-8dd8-1a41a768f83b"
    },
    {
      "parameters": {
        "inputText": "={{ $json['contato-menssagem'] }}",
        "categories": {
          "categories": [
            {
              "category": "Suporte",
              "description": "=// Script para identificar intenção de contato com o suporte\n\n// Função que recebe a mensagem do cliente e retorna a intenção\nfunction identificarIntencao(mensagem) {\n    // Palavras-chave e frases que indicam intenção de contato com o suporte\n    const palavrasChaveSuporte = [\n        \"preciso de ajuda\",\n        \"suporte\",\n        \"problema\",\n        \"não consigo\",\n        \"erro\",\n        \"ajuda com\",\n        \"contato com suporte\",\n        \"atendimento\",\n        \"não está funcionando\",\n        \"falar com suporte\",\n        \"suporte técnico\",\n        \"falha\",\n        \"bug\",\n        \"como resolver\",\n        \"ajuda urgente\"\n    ];\n\n    // Normaliza a mensagem para minúsculas para garantir a correspondência com palavras-chave\n    const mensagemNormalizada = mensagem.toLowerCase();\n\n    // Verifica se alguma das palavras-chave está presente na mensagem\n    const intencaoDeSuporte = palavrasChaveSuporte.some(palavraChave => \n        mensagemNormalizada.includes(palavraChave)\n    );\n\n    // Retorna true se identificou a intenção de suporte; caso contrário, false\n    return intencaoDeSuporte;\n}\n\n// Exemplo de uso\nconst mensagemDoCliente = \"Olá, estou com um problema e preciso falar com o suporte!\";\nif (identificarIntencao(mensagemDoCliente)) {\n    console.log(\"A intenção é: Suporte\"); // Ação quando há intenção de suporte\n} else {\n    console.log(\"Nenhuma intenção de suporte identificada\"); // Ação alternativa\n}\n"
            },
            {
              "category": "Financeiro",
              "description": "=// Script para identificar intenção de contato com o setor financeiro\n\n// Função que recebe a mensagem do cliente e retorna a intenção\nfunction identificarIntencaoFinanceiro(mensagem) {\n    // Palavras-chave e frases que indicam intenção de contato com o setor financeiro\n    const palavrasChaveFinanceiro = [\n        \"pagamento\",\n        \"fatura\",\n        \"cobrança\",\n        \"boleto\",\n        \"nota fiscal\",\n        \"financeiro\",\n        \"contas a pagar\",\n        \"contas a receber\",\n        \"quero pagar\",\n        \"problema com pagamento\",\n        \"erro na cobrança\",\n        \"emitir nota\",\n        \"refaturamento\",\n        \"ajuda com minha fatura\",\n        \"alterar forma de pagamento\",\n        \"comprovante de pagamento\",\n        \"parcelamento\"\n    ];\n\n    // Normaliza a mensagem para minúsculas para garantir a correspondência com palavras-chave\n    const mensagemNormalizada = mensagem.toLowerCase();\n\n    // Verifica se alguma das palavras-chave está presente na mensagem\n    const intencaoFinanceira = palavrasChaveFinanceiro.some(palavraChave => \n        mensagemNormalizada.includes(palavraChave)\n    );\n\n    // Retorna true se identificou a intenção financeira; caso contrário, false\n    return intencaoFinanceira;\n}\n\n// Exemplo de uso\nconst mensagemDoCliente = \"Olá, preciso de ajuda com o pagamento da minha fatura!\";\nif (identificarIntencaoFinanceiro(mensagemDoCliente)) {\n    console.log(\"A intenção é: Financeiro\"); // Ação quando há intenção de financeiro\n} else {\n    console.log(\"Nenhuma intenção financeira identificada\"); // Ação alternativa\n}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        -260,
        -20
      ],
      "id": "ab032bba-3263-43b6-9d4f-0b3e8b8644bb",
      "name": "Text Classifier"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -240,
        120
      ],
      "id": "9df57900-a90a-47cc-b218-1e7e0c5dd8f5",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "RhJGnAesg7rbO4uq",
          "name": "primeiro assistent"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b8b52f0b-bba8-43e6-ae00-0440b61e19ed",
              "name": "contato-nome",
              "value": "={{ $json.body.conversation.meta.sender.name }}",
              "type": "string"
            },
            {
              "id": "81f8e0a3-9d58-4eae-af56-be7f4f1ec74f",
              "name": "contato-wpp",
              "value": "={{ $json.body.conversation.messages[0].sender.identifier }}",
              "type": "string"
            },
            {
              "id": "ff0c9022-6895-46c9-8295-16db1e00c5ca",
              "name": "contato-menssagem",
              "value": "={{ $json.body.conversation.messages[0].content }}",
              "type": "string"
            },
            {
              "id": "9f4f8787-d143-48ca-9c75-764afbbebb12",
              "name": "conta-id",
              "value": "={{ $json.body.conversation.messages[0].account_id }}",
              "type": "string"
            },
            {
              "id": "a7aabad5-4776-43c6-9b62-d521ba0ddd14",
              "name": "conversa-id",
              "value": "={{ $json.body.conversation.messages[0].conversation_id }}",
              "type": "string"
            },
            {
              "id": "de33af0e-9161-4e75-bf70-7a2e61f6a007",
              "name": "evento-tipo",
              "value": "={{ $json.body.event }}",
              "type": "string"
            },
            {
              "id": "88680e1a-660e-4dae-a10d-a45b3878c579",
              "name": "chatwoot-token",
              "value": "zyDXZitMJccAXaTZF9arUxMh",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -660,
        0
      ],
      "id": "d08b9444-f8bf-48bb-8648-dc5e7a897cc7",
      "name": "normalização"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5e6b4f-f8ce-458b-ba7b-0e3f51615fed",
              "leftValue": "={{ $json['evento-tipo'] }}",
              "rightValue": "message_created",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -480,
        0
      ],
      "id": "0e4db6c8-0f3c-40dd-90b9-e02e522c3908",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo-chatwoot.tkbczu.easypanel.host/api/v1/accounts/{{ $json['conta-id'] }}/conversations/{{ $json['conversa-id'] }}/assignments",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "=zyDXZitMJccAXaTZF9arUxMh"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "team_id",
              "value": "2"
            }
          ]
        },
        "options": {}
      },
      "id": "775fe5a3-ca72-4527-8477-8533ab37c0e8",
      "name": "Chatwoot sup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        100,
        -160
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evo-chatwoot.tkbczu.easypanel.host/api/v1/accounts/{{ $json['conta-id'] }}/conversations/{{ $json['conversa-id'] }}/assignments",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api_access_token",
              "value": "=zyDXZitMJccAXaTZF9arUxMh"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "team_id",
              "value": "1"
            }
          ]
        },
        "options": {}
      },
      "id": "d472f42d-c63b-4567-a4e4-62db3e6c13ca",
      "name": "Chatwoot finan",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        100,
        120
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "normalização",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier": {
      "main": [
        [
          {
            "node": "Chatwoot sup",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Chatwoot finan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalização": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Text Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "53e1790a-46d6-4087-995e-86fa905bf233",
  "triggerCount": 0,
  "tags": []
}